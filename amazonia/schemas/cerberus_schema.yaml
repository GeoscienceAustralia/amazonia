#
# A guide yaml file to show which variables can be configured and the expected data types and yaml syntax.
# For a working example, see the defaults.yaml file in the amazonia folder.
#
# Note that some things follow a nested structure and some are in a flat structure.
#
# In an applications specific yaml you would want to define variables in a nested fashion (see below example)
#
# autoscaling_units:
#   -
#     unit_title: 'app1'
#     image_id: 'ami-some1234'
#     instance_type: 't2.micro'
#
# This will create an autoscaling unit with the title app1 based on the ami ami-some1234 and of the instance type t2.micro.
#
# If image_id was not specified, amazonia will look at the provided defaults to find an image_id field to use.
# In the default the yaml should have a flat structure like below (unless you always want an autoscaling unit or a
# database unit to be created:
#
# unit_title: 'app2'
# image_id: 'ami-1234some'
# instance_type: 't2.nano'
#
# If the application specific yaml did not specify a unit title, image id, or instance type, amazonia would fill those
# fields with either app2, ami-1234some, or t2.nano from the defaults depending on what was missing from the application yaml.
#
# PLEASE NOTE: When adding new default values to a unit level (that exists in defaults.yaml) please add to both the unit
# scheme and to the highest level of the scheme, e.g. unit_title, public_unit
#
# See following list for values that can be provided.
#
# stack_key_list = [
#                       'code_deploy_service_role',
#                       'keypair',
#                       'availability_zones',
#                       'vpc_cidr',
#                       'public_cidr',
#                       'jump_image_id',
#                       'jump_instance_type',
#                       'nat_image_id',
#                       'nat_instance_type',
#                       'home_cidrs',
#                       'stack_hosted_zone_name',
#                       'autoscaling_units',
#                       'database_units',
#                       'iam_instance_profile_arn',
#                       'owner_emails',
#                       'nat_alerting']
#     unit_key_list = {'autoscaling_units': ['unit_title',
#                                            'userdata',
#                                            'image_id',
#                                            'instance_type',
#                                            'elb_health_check',
#                                            'instance_protocol',
#                                            'loadbalancer_protocol',
#                                            'unit_hosted_zone_name',
#                                            'loadbalancer_port',
#                                            'instance_port',
#                                            'minsize',
#                                            'maxsize',
#                                            'health_check_grace_period',
#                                            'iam_instance_profile_arn',
#                                            'sns_topic_arn',
#                                            'sns_notification_types',
#                                            'elb_log_bucket',
#                                            'public_unit',
#                                            'health_check_type',
#                                            'dependencies',
#                                            'block_devices_config'],
#                      'database_units': ['unit_title',
#                                         'db_name',
#                                         'db_instance_type',
#                                         'db_engine',
#                                         'db_port',
#                                         'db_hdd_size',
#                                         'db_snapshot_id']
#                      }
#

unit_title:  &unit_title # A string containing the title of this autoscaling unit.
  type: 'string'
  regex: '^([a-zA-Z0-9]+$)' # matches an alphanumeric title
  nullable: True
dependencies: &dependencies # A list of strings with the titles of objects that this autoscaling unit depends on. eg: your autoscaling group may have userdata that needs internet access, therefore they have a dependency on your NAT.
  type: 'list'
  nullable: True
  schema:
    type: 'string'
    nullable: True
iam_instance_profile_arn: &iam_instance_profile_arn # A string specifying an instance IAM role by its ARN
  type: 'string'
  nullable: True
  empty: False

elb_config: &elb_config
  type: 'dict'
  nullable: True
  schema:
    instance_protocol: # a list of strings specifying the instance protocols load balancers will connect to this specific autoscaling group.
      type: 'list'
      nullable: True
      schema:
        type: 'string'
    loadbalancer_protocol: # a list of strings specifying the load balancer protocols to allow connections from.
      type: 'list'
      nullable: True
      schema:
        type: 'string'
    instance_port: # a list of strings specifying the ports to send traffic from your load balancers into this specific autoscaling group.
      type: 'list'
      nullable: True
      schema:
        type: 'string'
    loadbalancer_port: # a list of strings specifying the ports to receive traffic on the load balancer for this specific autoscaling group.
      type: 'list'
      nullable: True
      schema:
        type: 'string'
    elb_health_check: # A string containing the path for this autoscaling groups load balancer to check to confirm that your instances are healthy.
      type: 'string'
      nullable: True
    public_unit: # a boolean value that determines the internet-facing scheme for the elb and the subnets it lives on in the asg class
      type: 'boolean'
      nullable: False
      empty: False
    elb_log_bucket: # A string containing the name of the S3 bucket to log ELB traffic to
      type: 'string'
      nullable: True
    unit_hosted_zone_name: # A string containing the name of the Route 53 hosted zone name to use for creation of record sets for this unit
      type: 'string'
      nullable: True
      empty: False
    ssl_certificate_id: # A string containing the arn of the ssl certificate id
      type: 'string'
      nullable: True
      regex: '^arn:aws:.*'

simple_scaling_policy_config: &simple_scaling_policy_config
  type: 'dict'
  schema:
    name:
      type: 'string'
    description:
      type: 'string'
    metric_name:
      type: 'string'
    comparison_operator:
      type: 'string'
      allowed:
       - 'GreaterThanOrEqualToThreshold'
       - 'GreaterThanThreshold'
       - 'LessThanThreshold'
       - 'LessThanOrEqualToThreshold'
    threshold:
      type:
       - 'string'
    evaluation_periods:
      type:
       - 'number'
       - 'string'
    period:
      type:
       - 'number'
       - 'string'
    scaling_adjustment:
      type:
       - 'number'
       - 'string'
    cooldown:
      type:
       - 'number'
       - 'string'

block_devices_config: &block_devices_config
  type: 'dict'
  schema:
    device_name:  # Device name of disk
      type: 'string'
    ebs_volume_size:  # Size of disk
      nullable: True
      type: 'string'
    ebs_volume_type:  # type of disk
      nullable: True
      type:
        - 'number'
        - 'string'
    ebs_encrypted:  # Encryption enabled True or false
      type: 'boolean'
    ebs_snapshot_id:  # Snapshot ID
      nullable: True
      type: 'string'
    virtual_name:  # Virual disk enabled True or False
      type: 'boolean'

asg_config: &asg_config
  type: 'dict'
  nullable: True
  schema:
    sns_topic_arn: # A string containing the IAM role for SNS topics by it's ARN.
      type: 'string'
      nullable: True
    sns_notification_types: # A list of strings containing the notification types for SNS topics
      type: 'list'
      nullable: True
      schema:
        type: 'string'
    health_check_grace_period:  # A string containing the amount of seconds for your load balancer to wait for new instances before checking if they are 'healthy' or not.
      type: 'string'
      nullable: True
    health_check_type: # A string containing the type of health check to use for your autoscaling groups. This should 90% of the time be 'ELB'
      type: 'string'
      nullable: True
    minsize: # a number or string containing the minimum amount of instances for this specific autoscaling group to run
      type:
        - 'number'
        - 'string'
      nullable: True
    maxsize: # a number or string containing the maximum amount of instances for this specific autoscaling group to run
      type:
        - 'number'
        - 'string'
      nullable: True
    image_id: # A string specifying which ami to use for this specific autoscaling group by its id
      type: 'string'
      nullable: True
      regex: '^(ami-[a-zA-Z0-9]+$)' # matches an ami number eg: ami-some1234
    instance_type: # A string containing the instance type to use for this specific autoscaling group.
      type: 'string'
      nullable: True
    userdata: # A string containing userdata to run on this specific autoscaling group.
      type: 'string'
      nullable: True
    iam_instance_profile_arn: *iam_instance_profile_arn # A string specifying an instance IAM role for this specific autoscaling group by its ARN
    block_devices_config:
      type: 'list'
      nullable: True
      schema: *block_devices_config # the size for the hard drive of the instances on this autocaling unit
    simple_scaling_policy_config:
      type: 'list'
      nullable: True
      schema: *simple_scaling_policy_config # any scaling policies based upon cpu usage

blue_asg_config: *asg_config #nested dictionary containing blue asg specific configuration
green_asg_config: *asg_config #nested dictionary containing blue asg specific configuration

database_config: &database_config
  type: 'dict'
  nullable: True
  schema:
    db_name: # A string containing the title of this database instance.
      type: 'string'
      nullable: True
      empty: False
      regex: '^([a-zA-Z0-9]+$)' # matches an alphanumeric title
    db_instance_type: # A string containing the db type to use for this RDS instance
      type: 'string'
      nullable: True
      empty: False
    db_engine: # A string containing the engine to use. Find the available types here: https://aws.amazon.com/rds/
      type: 'string'
      nullable: True
      empty: False
    db_port: # A string containing the port to use for communication into the RDS instance
      type: 'string'
      nullable: True
      empty: False
    db_snapshot_id: # A string with the identifier of an RDS snapshot to use to provision DB
      type: 'string'
      nullable: True
    db_hdd_size: # The size for the rds hard drive/allocated storage
      type:
        - 'number'
        - 'string'
      nullable: False
    db_backup_window: # The daily time range during which automated backups are created if automated backups are enabled
      type: 'string'
      nullable: True
      regex: '^\d{2}:\d{2}-\d{2}:\d{2}$'
    db_backup_retention:
      type:
        - 'number'
        - 'string'
      nullable: True
    db_maintenance_window:
      type: 'string'
      regex: '^\w{3}:\d{2}:\d{2}-\w{3}:\d{2}:\d{2}$'
      nullable: True
    db_storage_type:
      type: 'string'
      nullable: True
      regex: '^(standard|gp2)$'

cf_distribution_config: &cf_distribution_config
  type: 'dict'
  nullable: True
  schema:
    aliases:
      type: 'list'
      nullable: True
      schema:
        type: 'string'
    comment:
      type: 'string'
      nullable: True
    default_root_object:
      type: 'string'
      nullable: True
    enabled:
      type: 'boolean'
      nullable: True
      empty: True
    price_class:
      type: 'string'
      nullable: True
      allowed:
       - 'PriceClass_All'
       - 'PriceClass_200'
       - 'PriceClass_100'
    target_origin_id:
      nullable: True
      type: 'string'
    allowed_methods:
      nullable: True
      type: 'list'
      schema:
        type: 'string'
        allowed:
         - 'GET'
         - 'HEAD'
         - 'DELETE'
         - 'OPTIONS'
         - 'POST'
         - 'PUT'
         - 'PATCH'
    cached_methods:
      nullable: True
      type: 'list'
      schema:
        type: 'string'
        allowed:
         - 'GET'
         - 'HEAD'
    trusted_signers:
      type: 'list'
      nullable: True
      schema:
        type: 'string'
    viewer_protocol_policy:
      type: 'string'
      nullable: True
      allowed:
       - 'allow-all'
       - 'redirect-to-https'
       - 'https-only'
    min_ttl:
      nullable: True
      type: 'number'
    default_ttl:
      nullable: True
      type: 'number'
    max_ttl:
      nullable: True
      type: 'number'
    error_page_path:
      type: 'string'
      nullable: True
    acm_cert_arn:
      type: 'string'
      nullable: True
    minimum_protocol_version:
      type: 'string'
      nullable: True
      allowed:
       - 'TLSv1'
       - 'TLSv1.1'
       - 'TLSv1.2'
    ssl_support_method:
      type: 'string'
      nullable: True
      allowed:
       - 'sni-only'
       - 'vip'

cf_origins_config: &cf_origins_config
    type: 'dict'
    schema:
      domain_name:
        type: 'string'
        nullable: True
      origin_id:
        type: 'string'
        nullable: True
      origin_policy:
        nullable: True
        type: 'dict'
        schema:
          is_s3:
            type: 'boolean'
            nullable: True
          origin_access_identity:
            type: 'string'
            nullable: True
          origin_protocol_policy:
            type: 'string'
            nullable: True
          http_port:
            nullable: True
            type: 'number'
          https_port:
            nullable: True
            type: 'number'
          origin_ssl_protocols:
            nullable: True
            type: 'list'
            schema:
              type: 'string'
              allowed:
               - 'TLSv1'
               - 'TLSv1.1'
               - 'TLSv1.2'

cf_cache_behavior_config: &cf_cache_behavior_config
    type: 'dict'
    schema:
      path_pattern:
        type: 'string'
        nullable: True
      allowed_methods:
        nullable: True
        type: 'list'
        schema:
          type: 'string'
          allowed:
           - 'GET'
           - 'HEAD'
           - 'DELETE'
           - 'OPTIONS'
           - 'POST'
           - 'PUT'
           - 'PATCH'
      cached_methods:
        nullable: True
        type: 'list'
        schema:
          type: 'string'
          allowed:
           - 'GET'
           - 'HEAD'
      target_origin_id:
        nullable: True
        type: 'string'
      forward_cookies:
        type: 'string'
        nullable: True
        empty: True
      viewer_protocol_policy:
        type: 'string'
        nullable: True
        allowed:
         - 'allow-all'
         - 'redirect-to-https'
         - 'https-only'
      min_ttl:
        nullable: True
        type: 'number'
      default_ttl:
        nullable: True
        type: 'number'
      max_ttl:
        nullable: True
        type: 'number'
      trusted_signers:
        type: 'list'
        nullable: True
        schema:
          type: 'string'

keypair: # A string containing the Key Pair to use for ssh access to your instances.
  type: 'string'
  empty: False
code_deploy_service_role: # A string specifying a code deploy IAM role by its ARN
  type: 'string'
  nullable: True
  empty: False
availability_zones: # A list of strings, specifying each availability zone to use when creating resources.
  type: 'list'
  empty: False
  schema:
    type: 'string'
    empty: False
vpc_cidr: # A cidr block to delegate to your VPC.
  type: 'string'
  empty: False # Below regex matches a CIDR pattern eg: 10.0.0.0/16
  regex: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
public_cidr: # A dictionary containing the name and cidr block to be considered 'public' by your stack.
  type: 'dict'
  empty: False
  schema:
    name:
      type: 'string'
      empty: False
      regex: '^([a-zA-Z0-9]+$)' # matches an alphanumeric title
    cidr:
      type: 'string'
      empty: False # Below regex matches a CIDR pattern eg: 10.0.0.0/16
      regex: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
home_cidrs: # A list of dictionaries with each list element containing the name and cidr blocks to be considered 'safe' for ssh access to your stack.
  type: 'list'
  empty: False
  schema:
    type: 'dict'
    schema:
      name:
        type: 'string'
        empty: False
        regex: '^([a-zA-Z0-9]+$)' # matches an alphanumeric title
      cidr:
        type: 'string'
        empty: False # Below regex matches a CIDR pattern eg: 10.0.0.0/16
        regex: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
jump_image_id: # A string specifying which ami to use for your jump box by its id
  type: 'string'
  empty: False
  regex: '^(ami-[a-zA-Z0-9]+$)' # matches an ami number eg: ami-some1234
jump_instance_type: # A string specifying which instance type to use for your jump box.
  type: 'string'
  empty: False
nat_image_id: # A string specifying which ami to use for your NAT by its id
  type: 'string'
  empty: False
  regex: '^(ami-[a-zA-Z0-9]+$)' # matches an ami number eg: ami-some1234
nat_instance_type: # A string specifying which instance type to use for your NAT.
  type: 'string'
  empty: False
stack_hosted_zone_name: # A string containing the name of the Route 53 hosted zone name to use for creation of record sets for your stack
  type: 'string'
  nullable: True
  empty: False
owner_emails:  # A list of email addresses to specify ownership of this stack and also send alerts to if
  type: 'list' # alerts have been set up.
  nullable: True
  schema:
    type: 'string'
    empty: False
nat_alerting: # A True/False advising whether or not to alert on the NAT instance to the owner_emails list.
  type: 'boolean'
  nullable: False
  empty: False

zd_autoscaling_units:  # A list of autoscaling groups to create. Load balancers, security groups, launch configurations, and autoscaling groups will be created for each of these units
  type: 'list'
  nullable: True
  schema:
    type: 'dict'
    schema:
      unit_title:  *unit_title # A string containing the title of this autoscaling unit.
      dependencies: *dependencies # A list of strings with the titles of objects that this autoscaling unit depends on. eg: your autoscaling group may have userdata that needs internet access, therefore they have a dependency on your NAT.
      elb_config: *elb_config #nested dictionary containing elb specific configuration
      blue_asg_config: *asg_config #nested dictionary containing blue asg specific configuration
      green_asg_config: *asg_config #nested dictionary containing blue asg specific configuration

autoscaling_units:  # A list of autoscaling groups to create. Load balancers, security groups, launch configurations, and autoscaling groups will be created for each of these units
  type: 'list'
  nullable: True
  schema:
    type: 'dict'
    schema:
      unit_title: *unit_title  # A string containing the title of this autoscaling unit.
      dependencies: *dependencies # A list of strings with the titles of objects that this autoscaling unit depends on. eg: your autoscaling group may have userdata that needs internet access, therefore they have a dependency on your NAT.
      elb_config: *elb_config #nested dictionary containing elb specific configuration
      asg_config: *asg_config #nested dictionary containing asg specific configuration

database_units: # A list of database units to create. Security groups, Database Subnet Groups, and RDS instances will be created for each of these units
  nullable: True
  type: 'list'
  schema:
    type: 'dict'
    schema:
      unit_title: *unit_title # A string containing the title of this autoscaling unit.
      database_config: *database_config #nested dictionary containing database specific configuration

cf_distribution_units:  # A list of Cloudfront distributions to create. Origins, cache behaviors, default cache behavior will be created for each of these units
  type: 'list'
  nullable: True
  schema:
    type: 'dict'
    schema:
      unit_title:  *unit_title # A string containing the title of this distribution unit.
      cf_cache_behavior_config:
        type: 'list'
        schema:
          *cf_cache_behavior_config # list of dictionaries containing cache behavior for this distribution
      cf_origins_config:
        type: 'list'
        schema:
          *cf_origins_config # list of dictionaries containing origins that this distribution is linked to
      cf_distribution_config: *cf_distribution_config  # dictionary containing default cache behavior for this distribution
