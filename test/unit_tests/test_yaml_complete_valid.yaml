#
# Test Stack Yaml for Amazonia
#
keypair: 'key'
code_deploy_service_role: 'arn:aws:iam::1234567890123:role/CodeDeployServiceRole'
availability_zones:
  - 'ap-southeast-2a'
  - 'ap-southeast-2b'
  - 'ap-southeast-2c'
vpc_cidr:
  name: 'VPC'
  cidr: '10.0.0.0/16'
public_cidr:
  name: 'PublicIp'
  cidr: '0.0.0.0/0'
jump_image_id: 'ami-dc361ebf'
jump_instance_type: 't2.nano'
nat_image_id: 'ami-53371f30'
nat_instance_type: 't2.nano'
nat_highly_available: true
home_cidrs:
  - name: 'office'
    cidr: '123.45.12.34/16'
public_hosted_zone_name: 'test.org.'
private_hosted_zone_name: 'private.lan.'
owner_emails:
iam_instance_profile_arn: 'arn:aws:iam::1234567890124:role/InstanceProfile'

zd_autoscaling_units:
  -
    unit_title: 'zdapp1'
    blue_asg_config:
      image_id: 'ami-dc361ebf'
      instance_type: 't2.nano'
      iam_instance_profile_arn: 'arn:aws:iam::1234567890124:role/InstanceProfile'
      minsize: '1'
      maxsize: '1'
      health_check_grace_period: '300'
      health_check_type: 'ELB'
      userdata: |
        #cloud-config
        repo_update: true
        repo_upgrade: all
        packages:
         - httpd
        write_files:
         - content: |
            <html>
            <body>
            <h1>Amazonia created this stack!</h1>
            </body>
            </html>
           path: /var/www/html/index.html
           permissions: '0644'
           owner: root:root
        runcmd:
         - service httpd start
    green_asg_config:
      image_id: 'ami-dc361ebf'
      instance_type: 't2.nano'
      iam_instance_profile_arn: 'arn:aws:iam::1234567890124:role/InstanceProfile'
      minsize: '1'
      maxsize: '1'
      health_check_grace_period: '300'
      health_check_type: 'ELB'
      simple_scaling_policy_config:
        -
          name: 'heavy load'
          description: 'When under heavy CPU load for five minutes, add two instances, wait 45 seconds'
          metric_name: 'CPUUtilization'
          comparison_operator: 'GreaterThanThreshold'
          threshold: '45'
          evaluation_periods: 1
          period: 300
          scaling_adjustment: 1
          cooldown: 45
        -
          name: 'light load'
          description: 'When under light CPU load for 6 consecutive periods of five minutes, remove one instance, wait 120 seconds'
          metric_name: 'CPUUtilization'
          comparison_operator: 'LessThanOrEqualToThreshold'
          threshold: '15'
          evaluation_periods: 6
          period: 300
          scaling_adjustment: -1
          cooldown: 120
      userdata: |
        #cloud-config
        repo_update: true
        repo_upgrade: all
        packages:
         - httpd
        write_files:
         - content: |
            <html>
            <body>
            <h1>Amazonia created this stack!</h1>
            </body>
            </html>
           path: /var/www/html/index.html
           permissions: '0644'
           owner: root:root
        runcmd:
         - service httpd start
    elb_config:
      elb_listeners_config:
        -
          loadbalancer_protocol: 'HTTP'
          instance_protocol: 'HTTP'
          instance_port: '80'
          loadbalancer_port: '80'
          sticky_app_cookie: 'JSESSION'
      elb_health_check: 'HTTP:80/index.html'
      elb_log_bucket: 'elb_log_bucket'
      public_unit: true
    dependencies:
     - 'app2'
     - 'db1'

autoscaling_units:
  -
    unit_title: 'app1'
    asg_config:
      image_id: 'ami-dc361ebf'
      instance_type: 't2.nano'
      iam_instance_profile_arn: 'arn:aws:iam::1234567890124:role/InstanceProfile'
      minsize: '1'
      maxsize: '1'
      health_check_grace_period: '300'
      health_check_type: 'ELB'
      userdata: |
        #cloud-config
        repo_update: true
        repo_upgrade: all
        packages:
         - httpd
        write_files:
         - content: |
            <html>
            <body>
            <h1>Amazonia created this stack!</h1>
            </body>
            </html>
           path: /var/www/html/index.html
           permissions: '0644'
           owner: root:root
        runcmd:
         - service httpd start
    elb_config:
      elb_listeners_config:
        -
          loadbalancer_protocol: 'HTTP'
          instance_protocol: 'HTTP'
          instance_port: '80'
          loadbalancer_port: '80'
      elb_health_check: 'HTTP:80/index.html'
      elb_log_bucket: 'elb_log_bucket'
      public_unit: true
    dependencies:
     - 'app2'
     - 'db1'
  -
    unit_title: 'app2'
    asg_config:
      image_id: 'ami-dc361ebf'
      instance_type: 't2.nano'
      iam_instance_profile_arn: 'arn:aws:iam::1234567890124:role/InstanceProfile'
      minsize: '1'
      maxsize: '1'
      health_check_grace_period: '300'
      health_check_type: 'ELB'
      simple_scaling_policy_config:
        -
          name: 'heavy - load'
          description: 'When under heavy CPU load for five minutes, add two instances, wait 45 seconds'
          metric_name: 'CPUUtilization'
          comparison_operator: 'GreaterThanThreshold'
          threshold: '45'
          evaluation_periods: 1
          period: 300
          scaling_adjustment: 1
          cooldown: 45
        -
          name: 'light - load'
          description: 'When under light CPU load for 6 consecutive periods of five minutes, remove one instance, wait 120 seconds'
          metric_name: 'CPUUtilization'
          comparison_operator: 'LessThanOrEqualToThreshold'
          threshold: '15'
          evaluation_periods: 6
          period: 300
          scaling_adjustment: -1
          cooldown: 120
      block_devices_config:
        -
          device_name: '/dev/xvda'
          ebs_volume_size: '15'
          ebs_volume_type: 'standard'
          ebs_encrypted: False
          ebs_snapshot_id:
          virtual_name: False
        -
          device_name: '/dev/std1'
          ebs_volume_size:
          ebs_volume_type:
          ebs_encrypted: False
          ebs_snapshot_id:
          virtual_name: True
      userdata: |
        #cloud-config
        repo_update: true
        repo_upgrade: all
        packages:
         - httpd
        write_files:
         - content: |
            <html>
            <body>
            <h1>Amazonia created this stack!</h1>
            </body>
            </html>
           path: /var/www/html/index.html
           permissions: '0644'
           owner: root:root
        runcmd:
         - service httpd start
    elb_config:
      elb_listeners_config:
        -
          loadbalancer_protocol: 'HTTP'
          instance_protocol: 'HTTP'
          instance_port: '80'
          loadbalancer_port: '80'
      elb_health_check: 'HTTP:80/index.html'
      elb_log_bucket: 'elb_log_bucket'
      public_unit: false

database_units:
  -
    unit_title: 'db1'
    database_config:
      db_instance_type: 'db.t2.micro'
      db_engine: 'postgres'
      db_port: '5432'
      db_name: 'myDb'

cf_distribution_units:
  -
    unit_title: 'distribution1'
    cf_origins_config:
      -
        domain_name: 's3bucket.s3.amazonaws.com'
        origin_id: 'S3-s3bucket'
        origin_path: '/'
        origin_policy:
          is_s3 : True
          origin_access_identity: 'origin-access-identity/cloudfront/ABCD1234ABCD1234'
      -
        domain_name: 'completeValidYamlApiGw'
        origin_id: 'apigw'
        origin_path: '/path'
        origin_policy:
          is_s3 : False
          origin_protocol_policy: 'https-only'
          http_port: 80
          https_port: 443
          origin_ssl_protocols:
           - 'TLSv1'
           - 'TLSv1.1'
           - 'TLSv1.2'
    cf_distribution_config:
      aliases:
       - 'www.domain.com'
       - 'domain.com'
      comment: 'Cloudfront for domain.com'
      default_root_object: 'index.html'
      enabled: True
      price_class: 'PriceClass_All'
      error_page_path: '404.html'
      acm_cert_arn: ''
      minimum_protocol_version: 'TLSv1'
      ssl_support_method: 'sni-only'
    cf_cache_behavior_config:
      -
        is_default: True
        allowed_methods:
         - 'GET'
         - 'POST'
         - 'HEAD'
         - 'DELETE'
         - 'OPTIONS'
         - 'PUT'
         - 'PATCH'
        cached_methods:
         - 'GET'
         - 'HEAD'
        target_origin_id: 'S3-s3bucket'
        forward_cookies: 'all'
        viewer_protocol_policy: 'allow-all'
        min_ttl: 0
        default_ttl: 10
        max_ttl: 84600
        trusted_signers:
          - 'self'
        path_pattern: '/login'
        query_string: True
  -
    unit_title: 'distribution2'
    cf_origins_config:
      -
        domain_name: 's3bucket.s3.amazonaws.com'
        origin_id: 'S3-s3bucket'
        origin_path:
        custom_headers:
          'origin': 'http://www.domain.com'
          'accept': 'True'
        origin_policy:
          is_s3 : True
          origin_access_identity: 'origin-access-identity/cloudfront/ABCD1234ABCD1234'
      -
        domain_name: 'app1'
        origin_id: 'app1-elb'
        origin_path:
        origin_policy:
          is_s3 : False
          origin_protocol_policy: 'https-only'
          http_port: 80
          https_port: 443
          origin_ssl_protocols:
           - 'TLSv1'
           - 'TLSv1.1'
           - 'TLSv1.2'
    cf_distribution_config:
      aliases:
       - 'www.domain.com'
       - 'domain.com'
      comment: 'Cloudfront for domain.com'
      default_root_object: 'index.html'
      enabled: True
      price_class: 'PriceClass_All'
      error_page_path: '404.html'
      acm_cert_arn: ''
      minimum_protocol_version: 'TLSv1'
      ssl_support_method: 'sni-only'
    cf_cache_behavior_config:
      -
        is_default: True
        allowed_methods:
         - 'GET'
         - 'POST'
         - 'HEAD'
         - 'DELETE'
         - 'OPTIONS'
         - 'PUT'
         - 'PATCH'
        cached_methods:
         - 'GET'
         - 'HEAD'
        target_origin_id: 'app1-elb'
        forward_cookies: 'all'
        viewer_protocol_policy: 'allow-all'
        min_ttl: 0
        default_ttl: 10
        max_ttl: 84600
        trusted_signers:
          - 'self'
        query_string: True
        path_pattern: '/login'

api_gateway_units:
  -
    unit_title: 'completeValidYamlApiGw'
    method_config:
      -
        method_name: 'login'
        lambda_unit: 'completeValidYamlLambda'
        httpmethod: 'POST'
        authorizationtype: 'NONE'
        request_config:
          templates:
            application/json: |
              { "username": $input.json(\'$.username\') }
          parameters:
            method.request.header.Origin: "$input.params('Origin')"
        response_config:
          -
            templates:
              application/json: ''
            parameters:
              method.response.header.Set-COokie: 'integration.response.body.SOMECOOKIE'
            statuscode: '200'
            selectionpattern: ''
            models:
              application/json: 'Empty'
          -
            templates:
              application/json: ''
            parameters:
              method.response.header.ABCDEF: 'integration.response.body.ANOTHERTHING'
            selectionpattern: 'Invalid.*'
            statuscode: '403'
            models:
              application/json: 'Empty'

lambda_units:
 -
  unit_title: 'completeValidYamlLambda'
  lambda_config:
    lambda_s3_bucket: 'bucket_name'
    lambda_s3_key: 'key_name'
    lambda_description: 'blah'
    lambda_function_name: 'my_function'
    lambda_handler: 'main'
    lambda_memory_size: 128
    lambda_role_arn: 'test_arn'
    lambda_runtime: 'python2.7'
    lambda_timeout: 1
  dependencies:
     - 'db1'
